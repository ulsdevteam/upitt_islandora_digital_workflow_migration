<?php

set_time_limit(0);

global $drupal_uids;
global $drupal_names;
global $idw_islandora_model_mapping;
global $tid_priority_mapping;
// NOTE: All of these email names have been normalized to lowercase since
// upitt_islandora_digital_workflow_migration_get_drupal_uid uses lowercase
// to search.
$drupal_uids = array(
  "abrenner@pitt.edu" =>53,
  "akg45@pitt.edu" =>481,
  "alexjtoner@pitt.edu" =>89110,
  "alt64@pitt.edu" =>64816,
  "asw76@pitt.edu" =>88956,
  "bdgregg@pitt.edu" =>38,
  "btr9@pitt.edu" =>89111,
  "chl291@pitt.edu" =>89112,
  "chs187@pitt.edu" =>686,
  "ctgraham@pitt.edu" =>135,
  "cwithers@pitt.edu" =>89113,
  "delvon.anderson@pitt.edu" =>44,
  "des125@pitt.edu" =>61,
  "discovery@discoverygarden.ca" =>56,
  "edwardg@pitt.edu" =>164,
  "esoward@pitt.edu" =>122,
  "grinnell@pitt.edu" =>89114,
  "heidicard@pitt.edu" =>482,
  "hek33@pitt.edu" =>740,
  "hok14@pitt.edu" =>64811,
  "jeanann@pitt.edu" =>89115,
  "jeffw@pitt.edu" =>134,
  "jek176@pitt.edu" =>64812,
  "jmp171@pitt.edu" =>125,
  "k.johnston@pitt.edu" =>128,
  "karimay@pitt.edu" =>88954,
  "kiarna@pitt.edu" =>483,
  "kmd106@pitt.edu" =>89116,
  "kmill@pitt.edu" =>89117,
  "kristin.britanik@pitt.edu" =>78366,
  "laurabrooks@pitt.edu" =>239,
  "lindan@pitt.edu" =>4229,
  "lugar@pitt.edu" =>89118,
  "mam687@pitt.edu" =>89119,
  "miriam@pitt.edu" =>89120,
  "mjj@pitt.edu" =>484,
  "mpmcgill@pitt.edu" =>89121,
  "mrbst20@pitt.edu" =>58,
  "nwatson@pitt.edu" =>89122,
  "rlh52@pitt.edu" =>131,
  "str51@pitt.edu" =>741,
  "tarka@pitt.edu" =>485,
  "tsd@pitt.edu" =>486,
  "tyt3@pitt.edu" =>89249,
  "uls-systemsdevelopment@mail.pitt.edu" =>1,
  "uls-systemsdevelopment@pitt.edu" =>768,
  "ulssdstu@pitt.edu" =>240,
  "wgillingham@pitt.edu" =>235,
  "williamdaw@pitt.edu" =>89123,
  "zlb2@pitt.edu" =>250
);
// Similar to above, but this maps the legacy email to the drupal users name.
$drupal_names = array(
  "abrenner@pitt.edu" => "abrenner",
  "akg45@pitt.edu" => "AKG45",
  "alexjtoner@pitt.edu" => "AJT64",
  "alt64@pitt.edu" => "ALT64",
  "ASW76@pitt.edu" => "ASW76",
  "bdgregg@pitt.edu" => "bdgregg",
  "btr9@pitt.edu" => "BTR9",
  "CHL291@pitt.edu" => "CHL291",
  "chs187@pitt.edu" => "CHS187",
  "ctgraham@pitt.edu" => "ctgraham",
  "cwithers@pitt.edu" => "CWITHERS",
  "delvon.anderson@pitt.edu" => "nylorac",
  "des125@pitt.edu" => "des125",
  "discovery@discoverygarden.ca" => "discoverygarden",
  "edwardg@pitt.edu" => "edwardg",
  "esoward@pitt.edu" => "esoward",
  "grinnell@pitt.edu" => "GRINNELL",
  "heidicard@pitt.edu" => "HRC5",
  "hek33@pitt.edu" => "HEK33",
  "HOK14@pitt.edu" => "HOK14",
  "jeanann@pitt.edu" => "JEANANN",
  "jeffw@pitt.edu" => "jeffw",
  "JEK176@pitt.edu" => "JEK176",
  "jmp171@pitt.edu" => "jmp171",
  "k.johnston@pitt.edu" => "kep31",
  "KARIMAY@pitt.edu" => "KARIMAY",
  "kiarna@pitt.edu" => "KIARNA",
  "kmd106@pitt.edu" => "KMD106",
  "kmill@pitt.edu" => "KMILL",
  "kristin.britanik@pitt.edu" => "KRB141",
  "laurabrooks@pitt.edu" => "LAB149",
  "LINDAN@pitt.edu" => "LINDAN",
  "lugar@pitt.edu" => "LUGAR",
  "mam687@pitt.edu" => "MAM687",
  "miriam@pitt.edu" => "MIRIAM",
  "mjj@pitt.edu" => "MJJ",
  "mpmcgill@pitt.edu" => "MPMCGILL",
  "mrbst20@pitt.edu" => "mrbst20",
  "nwatson@pitt.edu" => "NWATSON",
  "rlh52@pitt.edu" => "rlh52",
  "STR51@pitt.edu" => "STR51",
  "tarka@pitt.edu" => "TARKA",
  "tsd@pitt.edu" => "TSD",
  "tyt3@pitt.edu" => "TYT3",
  "uls-systemsdevelopment@mail.pitt.edu" => "admin",
  "uls-systemsdevelopment@pitt.edu" => "stackhealth_monitor_api",
  "ulssdstu@pitt.edu" => "ULSSDSTU",
  "wgillingham@pitt.edu" => "bgilling",
  "williamdaw@pitt.edu" => "WCDST3",
  "zlb2@pitt.edu" => "ZLB2",
);

$tid_priority_mapping = upitt_islandora_digital_workflow_migration_get_priority_tids();

// These are used as a constant here to avoid database queries on this lookup.
$idw_islandora_model_mapping = array(
  1 => 'manuscriptCModel',
  2 => 'sp_large_image_cmodel',
  3 => 'bookCModel',            // text - cataloged
  4 => 'bookCModel',            // text - uncataloged
  5 => 'sp_large_image_cmodel', // map
  6 => 'sp_pdf',
  7 => 'sp_large_image_cmodel', // georeferenced map
  8 => 'newspaperIssueCModel',  // newspaper - cataloged
);

define('CST_TEMP_MESSAGE_FILE', '/tmp/upitt_islandora_digital_workflow_migration_message');
define('CST_DELIVERY_ROOT', '/ingest/dlxs/repository/');

// For permissions.
define('UPITT_ISLANDORA_DIGITAL_WORKFLOW_MIGRATION', 'use upitt workflow migration');

// This module relies on some database functions that are in the code for
// upitt_workflow.module.
module_load_include('module', 'upitt_workflow', 'upitt_workflow');

/**
 * Implements hook_menu().
 */
function upitt_islandora_digital_workflow_migration_menu() {
  $items = array(
    'admin/islandora/upitt_islandora_digital_workflow_migration' => array(
      'title' => t('University of Pittsburgh - Migrate from DRL django to Islandora Digital Workflow'),
      'description' => 'Migrate records from legacy DRL django system to the Islandora Digital Workflow system.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_islandora_digital_workflow_migration_show_possible'),
      'access arguments' => array(UPITT_ISLANDORA_DIGITAL_WORKFLOW_MIGRATION),
    ),
    'admin/islandora/upitt_islandora_digital_workflow_migration/migrate/%' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_islandora_digital_workflow_migration_migrate_batches', 4),
      'access arguments' => array(UPITT_ISLANDORA_DIGITAL_WORKFLOW_MIGRATION),
    ),
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function upitt_islandora_digital_workflow_migration_permission() {
  return array(
    UPITT_ISLANDORA_DIGITAL_WORKFLOW_MIGRATION => array(
      'title' => t('Use UPitt Islandora Digital Workflow Migration'),
      'description' => t('Can use the UPitt Islandora Digital Workflow Migration utility.'),
    ),
  );
}

/**
 * Implements hook_theme()
 */
function upitt_islandora_digital_workflow_migration_theme() {
  return array(
    'upitt_islandora_digital_workflow_record' => array(
      'variables' => array(
        'row' => array(),
        'title' => '',
        'extra_content' => '',
        'class' => '',
      ),
      'template' => 'theme/upitt-islandora-digital-workflow-record'
    ),
  );
}

/**
 * Implements hook_preprocess_page().
 *
 * This code will include the CSS only for the paths that apply to the module itself.
 */
function upitt_islandora_digital_workflow_migration_preprocess_page(&$vars) {
  $path = drupal_get_path('module', 'upitt_islandora_digital_workflow_migration');
  $item = menu_get_item();
  if (is_array($item)) {
    if ($item['path'] == 'admin/islandora/upitt_islandora_digital_workflow_migration' ||
        $item['path'] == 'admin/islandora/upitt_islandora_digital_workflow_migration/migrate/%') {
      drupal_add_css($path . '/style/styles.css');
    }
  }
}

/**
 * Main function to display the possible batches for migration.
 *
 * @param array $form
 *   The Drupal form definition.
 * @param array $form_state
 *   The Drupal form state.
 * @return array
 *   A Drupal form definition.
 */
function upitt_islandora_digital_workflow_migration_show_possible(array $form, array &$form_state) {
  module_load_include('inc', 'upitt_islandora_digital_workflow_migration', 'includes/db');
  if (file_exists(CST_TEMP_MESSAGE_FILE)) {
    $file_contents = file_get_contents(CST_TEMP_MESSAGE_FILE);
    drupal_set_message($file_contents);
    @unlink(CST_TEMP_MESSAGE_FILE);
  }

  $form = array();
  $include_filter = (array_key_exists('include_filter', $_POST) ? trim($_POST['include_filter']) : @$_SESSION['include_filter']);
  $exclude_filter = (array_key_exists('exclude_filter', $_POST) ? trim($_POST['exclude_filter']) : @$_SESSION['exclude_filter']);
  $delete_existing_records = (array_key_exists('delete_existing_records', $_POST) ? $_POST['delete_existing_records'] : @$_SESSION['delete_existing_records']);
  $_SESSION['include_filter'] = $include_filter;
  $_SESSION['exclude_filter'] = $exclude_filter;
  $_SESSION['delete_existing_records'] = $delete_existing_records;
  $possible_batches = upitt_islandora_digital_workflow_migration_get_batches($include_filter, $exclude_filter);
  $total_items =0;
  $links = $l = array();
  $migrated_batches = variable_get('upitt_islandora_digital_workflow_migration_migrated_batches', array());
  foreach ($possible_batches as $possible_batch) {
    $total_items += $possible_batch['items count'];
    $link_string = l($possible_batch['name'], 'admin/islandora/upitt_islandora_digital_workflow_migration/migrate/' . $possible_batch['name']) . 
        ' <b>' . number_format($possible_batch['items count']) . ' items</b>' . 
        (!(array_search($possible_batch['name'], $migrated_batches) === FALSE) ? 
            ' <i>(has been migrated)</i>' : '') ;
    $l[] = $link_string;
  }

  $links[] = l('All', 'admin/islandora/upitt_islandora_digital_workflow_migration/migrate/all') . ' <b>' . number_format($total_items) . ' items</b><hr>';

  $links = array_merge($links, $l);
  $form = array(
    'include_filter' => array(
      '#type' => 'textfield',
      '#title' => 'Include Filter',
      '#description' => t('When set, all results will match this filter in their batch.name value will be displayed.  <b>NOTE:</b> Using a "*" character would represent a wildcard match at that location which must be either at the beginning and/or end of filter value.'),
      '#default_value' => $include_filter,
      '#maxlength' => 50,        
    ),
    'exclude_filter' => array(
      '#type' => 'textfield',
      '#title' => 'Exclude Filter',
      '#description' => t('When set, all results will <b>NOT match</b> the filter value in their batch.name.  <b>NOTE:</b> Using a "*" character would represent a wildcard match at that location which must be either at the beginning and/or end of filter value.'),
      '#default_value' => $exclude_filter,
      '#maxlength' => 50,
    ),
    'delete_existing_records' => array(
      '#type' => 'checkbox',
      '#title' => 'Delete existing Islandora Digital Workflow records?',
      '#description' => 'When set, this will remove any matching `Islandora Digital Workflow` records for each batch as they are migrated.',
      '#default_value' => TRUE,
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Filter results'),
    ),
    'reset' => array(
      '#type' => 'submit',
      '#value' => t('Reset form'),
    ),
    'migrate_these' => array(
      '#type' => 'submit',
      '#value' => t('Migrate these batches'),
      '#attributes' => array(
        'style' => array('font-weight: bold'),
      ),
    ),
    'batches' => array(
      '#type' => 'item',
      '#markup' => implode("<br />", $links),
    ),
  );
  $form_state['rebuild'] = TRUE; // needed to pass $form_state back to _form function

  return $form;
}

/**
 * Handle the submission of the filtering on possible batches - user could click
 * either "Migrate these batches" button or a "Filter results" button
 *
 * @param array $form
 *   The Drupal form definition.
 * @param array $form_state
 *   The Drupal form state.
 * @return array
 *   A Drupal form definition.
 */
function upitt_islandora_digital_workflow_migration_show_possible_submit(array $form, array &$form_state) {
  // When the user clicks "Reset form", clear the _SESSION variables - and redirect.
  if ($form_state['triggering_element']['#value'] == t('Reset form')) {
    $_SESSION['include_filter'] = '';
    $_SESSION['exclude_filter'] = '';
    $_SESSION['delete_existing_records'] = FALSE;
    drupal_goto('/admin/islandora/upitt_islandora_digital_workflow_migration');
  }
  // The filtering is displayed and handled in the form code above - since that 
  // is parsing the $_POST superglobal and rebuilding the form.

  // Migrate these
  if ($form_state['triggering_element']['#value'] == t('Migrate these batches')) {
    $include_filter = (array_key_exists('include_filter', $_POST) ? $_POST['include_filter'] : @$_SESSION['include_filter']);
    $exclude_filter = (array_key_exists('exclude_filter', $_POST) ? $_POST['exclude_filter'] : @$_SESSION['exclude_filter']);
    $delete_existing_records = (array_key_exists('delete_existing_records', $_POST) ? $_POST['delete_existing_records'] : @$_SESSION['delete_existing_records']);
    
    $_SESSION['include_filter'] = $include_filter;
    $_SESSION['exclude_filter'] = $exclude_filter;
    $_SESSION['delete_existing_records'] = $delete_existing_records;
    $migrate_batches = upitt_islandora_digital_workflow_migration_get_batches($include_filter, $exclude_filter);
    $output = '';
    foreach ($migrate_batches as $migrate_batch) {
      $output .= upitt_islandora_digital_workflow_migration_migrate_batch($migrate_batch['name'], $delete_existing_records);
    }
    file_put_contents(CST_TEMP_MESSAGE_FILE, $output);
    drupal_goto('/admin/islandora/upitt_islandora_digital_workflow_migration');
  }

  return $form;
}

/**
 * This function will migrate a single batch.  The code iterates through the
 * items related to a batch and all of the transactions related to those items
 * and migrates them all.
 *
 * @param string $batch_name
 *   The identifier field for a batch.
 * @param boolean $delete_existing_records
 *   Whether or not to delete any matching islandora_digital_workflow record
 * before trying to insert it.
 * @return boolean
 *   Whether or not the batch was able to be migrated.
 */
function upitt_islandora_digital_workflow_migration_migrate_batch($batch_name, $delete_existing_records = TRUE) {
  module_load_include('inc', 'upitt_islandora_digital_workflow_migration', 'includes/db');
  $output = '';
  $batch_migrated_count = $item_migrated_count = $transaction_migrated_count = 0;
  if ($batch_name == 'all') {
    $batch_names = upitt_islandora_digital_workflow_migration_get_batches();
    $batch_names = array_keys($batch_names);
  }
  else {
    $batch_names = array($batch_name);
  }
  $drupal_db_link = upitt_workflow_get_databaselink('default');
  $content_types_vocab = taxonomy_vocabulary_machine_name_load('workflow_content_type_vocab');
  $j = 1;
  foreach ($batch_names as $batch_name) {
    $output .= '<h3>Migrating batch "' . $batch_name . '"</h3>';
    $django_batch = upitt_islandora_digital_workflow_migration_get_batch($batch_name);
    $added_this_batch = upitt_islandora_digital_workflow_migration_create_batch($django_batch, $delete_existing_records);

    $batch_id = $added_this_batch->batch_id;
    $batch_migrated_count += (is_object($added_this_batch) ? 1 : 0);
    $output .= theme('upitt_islandora_digital_workflow_record', array(
      'title' => 'Django Batch [#' . $j . ']',
      'row' => $django_batch,
      'class' => 'indent-1 batch-div'));

    $output .= theme('upitt_islandora_digital_workflow_record', array(
      'title' => 'Batch [#' . $j . ']',
      'row' => (array)$added_this_batch,
      'class' => 'indent-1 batch-div idw')) . '<br class="clearfloat" />';

    $items = upitt_islandora_digital_workflow_migration_get_batch_item_records($batch_name);
    $items_output = array();
    $mig_tx_row = 0;
    $item_row = 1;
    foreach ($items as $item) {
      $transactions = upitt_islandora_digital_workflow_migration_get_transaction_records($item['item_id']);
      $added_this_batch_item = upitt_islandora_digital_workflow_migration_create_item($item, $added_this_batch, $django_batch, $delete_existing_records);
      $item_migrated_count += (is_object($added_this_batch_item) ? 1 : 0);
      $tx_row = $idw_t = 1;
      $transactions_output = '<div class="transactions"><h3>Django Transactions</h3>';
      $idw_transactions_output = '<br class="clearfloat" /><h3>Islandora Digital Workflow Transactions</h3>';
      foreach ($transactions as $transaction) {
        $added_this_transaction = upitt_islandora_digital_workflow_migration_create_transaction($transaction, $added_this_batch_item);
        $transaction_migrated_count += (is_array($added_this_transaction) ? 1 : 0);
        $transactions_output .= theme('upitt_islandora_digital_workflow_record', array(
          'title' => 'Transaction [#' . $tx_row . ']',
          'row' => $transaction,
          'class' => 'indent-2' . (is_array($added_this_transaction) ? ' keep' : ' skipped')));
        if (is_array($added_this_transaction)) {
          $idw_transactions_output .= theme('upitt_islandora_digital_workflow_record', array(
            'title' => 'Transaction [#' . $idw_t . ']',
            'row' => $added_this_transaction,
            'class' => 'indent-2 idw'
          ));
          $idw_t++;
        }

        $tx_row++;
      }

      $idw_batch_item_output = theme('upitt_islandora_digital_workflow_record', array(
        'title' => 'Item [#' . $item_row . '] "' . $item['do_id'] . '"',
        'row' => (array)$added_this_batch_item,
        'extra_content' => '',
        'class' => 'indent-1 idw'));
      $output .= theme('upitt_islandora_digital_workflow_record', array(
        'title' => 'Django Item [#' . $item_row . '] "' . $item['do_id'] . '"',
        'row' => $item,
        'extra_content' => $idw_batch_item_output . '<br class="clearfloat" />' .
          $transactions_output . $idw_transactions_output,
        'class' => 'indent-1')) . '</div><br class="clearfloat" />';
      $item_row++;
      $mig_tx_row += $tx_row;
    }
    $j++;
    // Final step -- call the islandora_digital_workflow code needed to create
    // a drupal workflow_batch node related to this batch record.
    upitt_islandora_digital_workflow_migration_make_or_update_node($added_this_batch, $content_types_vocab, $drupal_db_link);
  }

  $summary = ($output) ?
    number_format($batch_migrated_count) . ' batches migrated<br>' .
    number_format($item_migrated_count) . ' items migrated<br>' .
    number_format($transaction_migrated_count) . ' of ' .
    number_format($mig_tx_row) . ' transactions migrated<br>' : '';
  $migrated_batches = variable_get('upitt_islandora_digital_workflow_migration_migrated_batches', array());
  if (array_search($batch_name, $migrated_batches) === FALSE) {
    $migrated_batches[] = $batch_name;
    variable_set('upitt_islandora_digital_workflow_migration_migrated_batches', $migrated_batches);
  }
  return $summary . $output;
}

/**
 * This will return an Islandora model given a DRL item type id value.  This will
 * default to `islandora:sp_large_image_cmodel` when no match is found.
 *
 * @global array $idw_islandora_model_mapping
 *   The mapping to the Islandora model related to each of the types.
 * @param integer $type_id
 *   The DRL value that matches the mappings in core_item_type table.
 * @return string
 *   The islandora model name.
 */
function upitt_islandora_digital_workflow_migration_get_islandora_model_from_type_id($type_id) {
  global $idw_islandora_model_mapping;
  return 'islandora:' . (!(array_key_exists($type_id, $idw_islandora_model_mapping) === FALSE)) ?
      $idw_islandora_model_mapping[$type_id] : 'sp_large_image_cmodel';
}


/**
 * This will return a taxonomy term tid DRL batch's priority value.  This will
 * default to the $tid for "Low" priority batches.
 *
 * @global array $idw_islandora_model_mapping
 *   The mapping to the Islandora model related to each of the types.
 * @param integer $type_id
 *   The DRL value that matches the mappings in core_item_type table.
 * @return string
 *   The islandora model name.
 */
function upitt_islandora_digital_workflow_migration_get_priority($priority_int) {
  global $tid_priority_mapping;

  if (($priority_int && $priority_int <> '')) {
    return 'islandora:' . (!(array_key_exists(($priority_int + 2), $tid_priority_mapping) === FALSE)) ?
      $tid_priority_mapping[$priority_int + 2]['tid'] : $tid_priority_mapping[3]['tid'];
  }
  else {
    return $tid_priority_mapping[2]['tid'];
  }
}

/**
 * To populate the global $tid_priority_mapping value -- look up all
 * taxonomy terms for the "workflow_batch_priority_vocab" vocabulary and
 * return an array of the terms' tid value and term name.
 *
 * @return array
 *   An associative array of taxonomy terms for various priority keys.
 */
function upitt_islandora_digital_workflow_migration_get_priority_tids() {
  $vocab = taxonomy_vocabulary_machine_name_load('workflow_batch_priority_vocab');
  module_load_include('inc', 'islandora_digital_workflow', 'includes/taxonomy_utilities');
  $t = islandora_digital_workflow_get_all_terms_of_vocab($vocab);
  $return = array(0 => 0);
  $i = 5;
  foreach ($t as $term) {
    $return[$i] = array(
      'name' => $term->name,
      'tid' => $term->tid,
    );

    $i--;
  }
  return $return;
}

/**
 * This will return the drupal users uid value that relates to a given email
 * address that is common to both the DRL and the Islandora system.
 *
 * @global array $drupal_uids
 *
 * @param string $email
 *   The email address that is used for lookup.
 * @return integer
 *   The drupal uid value related to the email address -- this may return 0
 * which is considered "system".
 */
function upitt_islandora_digital_workflow_migration_get_drupal_uid($email) {
  global $drupal_uids;
  $lc_email_key = strtolower($email);
  return (!(array_key_exists($lc_email_key, $drupal_uids) === FALSE)) ?
      $drupal_uids[$lc_email_key] : 0;
}

/**
 * This will return the drupal users name value that relates to a given email
 * address that is common to both the DRL and the Islandora system.
 *
 * @global array $drupal_names
 *
 * @param string $email
 *   The email address that is used for lookup.
 * @return integer
 *   The drupal uid value related to the email address -- this may return 0
 * which is considered "system".
 */
function upitt_islandora_digital_workflow_migration_get_drupal_name($email) {
  global $drupal_names;
  $lc_email_key = strtolower($email);
  return (!(array_key_exists($lc_email_key, $drupal_names) === FALSE)) ?
      $drupal_names[$lc_email_key] : 0;
}

/**
 * Form to handle a single batch.name - and prompt the user to migrate.
 *
 * This form is linked to by the main "possible batches" routine.... it may be
 * superflous, but provided nonetheless.
 *
 * @param array $form
 *   The Drupal form definition.
 * @param array $form_state
 *   The Drupal form state.
 * @param string $batch_name
 *   The identifier field for a batch.
 * @return array
 *   A Drupal form definition.
 */
function upitt_islandora_digital_workflow_migration_migrate_batches(array $form, array &$form_state, $batch_name = '') {
  $form = array(
    'batchname' => array(
      '#type' => 'item',
      '#markup' => '<b>Migrate ' .
        (($batch_name == 'all') ? 'All Batches' : 'batch "' . $batch_name . '"') . '?</b>',
    ),
    'batch_name' => array(
      '#type' => 'hidden',
      '#default_value' => $batch_name,
    ),
    'delete_existing_records' => array(
      '#type' => 'checkbox',
      '#title' => 'Delete existing Islandora Digital Workflow records?',
      '#description' => 'When set, this will remove any matching `Islandora Digital Workflow` records for each batch as they are migrated.',
      '#default_value' => TRUE,
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Migrate batch'),
    ),
    'cancel' => array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
    ),
  );
  return $form;
}

/**
 * Submit handler for migration prompt on a single batch_name.
 *
 * @param array $form
 *   The Drupal form definition.
 * @param array $form_state
 *   The Drupal form state.
 */
function upitt_islandora_digital_workflow_migration_migrate_batches_submit(array $form, array &$form_state) {
  $batch_name = $form['batch_name']['#value'];
  // if the user cancels, send them back to the main page.
  if ($form_state['triggering_element']['#value'] == t('Cancel')) {
    drupal_set_message('Migration cancelled for django batch "' . $batch_name . '".');
    drupal_goto('/admin/islandora/upitt_islandora_digital_workflow_migration');
  }
  $delete_existing_records = $form['delete_existing_records']['#value'];
  if ($output = upitt_islandora_digital_workflow_migration_migrate_batch($batch_name, $delete_existing_records)) {
    file_put_contents(CST_TEMP_MESSAGE_FILE, $output);
    drupal_goto('/admin/islandora/upitt_islandora_digital_workflow_migration');
  }
}

function upitt_islandora_digital_workflow_migration_make_or_update_node($created_batch_record_object, $content_types_vocab, $drupal_db_link) {
  module_load_include('inc', 'islandora_digital_workflow', 'includes/taxonomy_utilities');
  $node = (is_object($created_batch_record_object) && $created_batch_record_object->nid) ?
    node_load($created_batch_record_object->nid) : NULL;
  if (is_null($node)) {
    $node = new stdClass();
  }
  $node->title = $created_batch_record_object->batch_name;
  $node->type = "workflow_batch";
  // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  node_object_prepare($node);
  // Or e.g. 'en' if locale is enabled.
  $node->language = LANGUAGE_NONE;
  $node->uid = 0; // Node will have "admin" as the user, but the batch record
                  // has "upitt_islandora_digital_workflow_migration".
  // Status is 1 or 0; published or not.
  $node->status = 1;
  // Promote is 1 or 0; promoted to front page or not.
  $node->promote = 0;
  // Comment is 0, 1, 2; 0 = disabled, 1 = read only, or 2 = read/write.
  $node->comment = 0;

  // Set any specific CCK field values for the node object
  $node->field_batch_name[$node->language][0]['value'] = $created_batch_record_object->batch_name;
  $node->field_content_type[$node->language][] = array('tid' => $created_batch_record_object->islandora_model);

  $stages_vocab = taxonomy_vocabulary_machine_name_load('workflow_stage_vocab');
  $stage_new_tid = islandora_digital_workflow_get_tid_by_name('New', $stages_vocab);

  $node_has_new_stage_already = FALSE;
  $node_has_new_stage_already = (isset($node->field_stage) && (array_key_exists($node->language, $node->field_stage) &&
      array_key_exists(0, $node->field_stage[$node->language]) &&
      array_key_exists('tid', $node->field_stage[$node->language][0]) &&
      $node->field_stage[$node->language][0]['tid'] == $stage_new_tid)) ? TRUE : FALSE;
  if ($stage_new_tid && !$node_has_new_stage_already) {
    $node->field_stage[$node->language][] = array('tid' => $stage_new_tid);
  }
  $content_types_vocab = taxonomy_vocabulary_machine_name_load('workflow_content_type_vocab');
  // For the Content Types cck field, the batch_record value is storing the term value
  $node->field_islandora_model[$node->language][0]['tid'] = islandora_digital_workflow_get_tid_by_name('islandora:' .
      str_replace('islandora:', '', $created_batch_record_object->islandora_model), $content_types_vocab);

  // For the batch_priorities_tid cck field, the batch_record value has tid value
  $node->field_priority[$node->language][0]['tid'] = $created_batch_record_object->batch_priority_tid;

  $node->field_pid_count[$node->language][0]['value'] = $created_batch_record_object->object_count;
  $node->field_collections_mapping[$node->language][]['value'] = $created_batch_record_object->mapto_collections;
//  if (variable_get('islandora_digital_workflow_use_isMemberOfSite', 0)) {
//    foreach ($created_batch_record_object->sites_select as $site_pid) {
//      $node->field_sites_mapping[$node->language][]['value'] = $site_pid;
//    }
//  }

  $node->field_identifiers[$node->language][0]['value'] = '';

  $node = node_submit($node); // Prepare node for saving
  node_save($node);
  $update_batch_arr = array(
      'batch_id' => $created_batch_record_object->batch_id,
      'nid' => $node->nid,
  );

  $query = 'UPDATE islandora_digital_workflow_batch ' .
    'SET nid = ' . $node->nid . ' ' .
    'WHERE batch_id = ' . $created_batch_record_object->batch_id;

  $result = mysqli_query($drupal_db_link, $query);
  if (!$result) {
    upitt_workflow_sql_error_die($drupal_db_link, $query);
  }
  mysqli_close($drupal_db_link);
}

function upitt_islandora_digital_workflow_migration_get_django_json_add_datastream($islandora_object) {
  module_load_include('inc', 'islandora_video' ,'includes/derivatives');
  @list($ns, $identifier) = explode(":", $islandora_object->id);
  $url = 'http://bigfoot.library.pitt.edu/django/workflow/item/' . $identifier . '/json/';
  $json_string = file_get_contents($url);
  if ($json_string) {
    upitt_islandora_digital_workflow_migration_add_datastream($islandora_object, 'DJANGO_JSON', $json_string);
  }
  else {
    drupal_set_message(t('There was an error trying to pull the JSON for item @identifier', array(
      '@identifier' => $identifier)), 'warning');
  }
  return TRUE;
}

function upitt_islandora_digital_workflow_migration_add_datastream($object, $datastream_id, $file_contents) {
  try {
    $ingest = !isset($object[$datastream_id]);

    if ($ingest) {
      $ds = $object->constructDatastream($datastream_id, "M");
      $ds->label = $datastream_id;
    }
    else {
      $ds = $object[$datastream_id];
    }
    if ($ds->mimetype != 'text/plain') {
      $ds->mimetype = 'text/plain';
    }
    $ds->setContentFromString($file_contents);
    if ($ingest) {
      $object->ingestDatastream($ds);
    }
    return array(
      'success' => TRUE,
      'messages' => array(
        array(
          'message' => t('Created @dsid derivative for OBJ (@pid).'),
          'message_sub' => array(
            '@dsid' => $datastream_id,
            '@pid' => $object->id,
          ),
          'type' => 'dsm',
        ),
      ),
    );
  }
  catch (exception $e) {
    return array(
      'success' => FALSE,
      'messages' => array(
        array(
          'message' => t('Failed to add @dsid datastream for @pid. Error message: "@message" with trace: @stack'),
          'message_sub' => array(
            '@dsid' => $datastream_id,
            '@pid' => $object->id,
            '@message' => $e->getMessage(),
            '@stack' => $e->getTraceAsString(),
          ),
          'type' => 'watchdog',
          'severity' => WATCHDOG_ERROR,
        ),
      ),
    );
  }
}

/**
 * Implements hook_islandora_object_ingested().
 *
 * This will check the workflow database to insert a transaction record for it.
 * This hook is not to be confused with the one for datastreams.
 *
 * @param AbstractObject $object
 *   The object that was just ingested.
 */
function upitt_islandora_digital_workflow_migration_islandora_object_ingested(AbstractObject $object) {
  if (variable_get('islandora_digital_workflow_handle_islandora_hook', 0) < 1) {
    // This makes sense to use the configuration for this handler that is from
    // islandora_digital_workflow.
    return;
  }
  if (is_object($object)) {
    try {
      upitt_islandora_digital_workflow_migration_get_django_json_add_datastream($object);
    }
    catch (Exception $e) {
      $variables = array(
        '@object_pid' => $object->id
      );
      watchdog('upitt_islandora_digital_workflow_migration',
          'There was a problem trying to add the Django JSON datastream to the object @object_pid',
          $variables, WATCHDOG_ERROR);
    }
  }
}
